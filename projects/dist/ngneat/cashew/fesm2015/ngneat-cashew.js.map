{"version":3,"file":"ngneat-cashew.js","sources":["../../../../ngneat/cashew/src/lib/keySerializer.ts","../../../../ngneat/cashew/src/lib/httpCacheConfig.ts","../../../../ngneat/cashew/src/lib/deleteByRegex.ts","../../../../ngneat/cashew/src/lib/httpCacheStorage.ts","../../../../ngneat/cashew/src/lib/ttlManager.ts","../../../../ngneat/cashew/src/lib/httpCacheGuard.ts","../../../../ngneat/cashew/src/lib/requestsQueue.ts","../../../../ngneat/cashew/src/lib/cacheBucket.ts","../../../../ngneat/cashew/src/lib/httpCacheManager.service.ts","../../../../ngneat/cashew/src/lib/cacheContext.ts","../../../../ngneat/cashew/src/lib/httpCacheInterceptor.ts","../../../../ngneat/cashew/src/lib/httpCacheInterceptor.module.ts","../../../../ngneat/cashew/src/lib/localstorage/localstorage.ts","../../../../ngneat/cashew/src/lib/localstorage/httpCacheLocalStorage.ts","../../../../ngneat/cashew/src/lib/localstorage/localStorageTtlManager.ts","../../../../ngneat/cashew/src/lib/localstorage/useHttpCacheLocalStorage.ts","../../../../ngneat/cashew/src/ngneat-cashew.ts"],"sourcesContent":["import { HttpRequest } from '@angular/common/http';\nimport { ContextOptions } from './cacheContext';\n\nexport abstract class KeySerializer {\n  abstract serialize(request: HttpRequest<any>, context: ContextOptions): string;\n}\n\nexport class DefaultKeySerializer extends KeySerializer {\n  serialize(request: HttpRequest<any>, context: ContextOptions) {\n    return context.key ?? request.urlWithParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface HttpCacheConfig {\n  strategy: 'implicit' | 'explicit';\n  ttl: number;\n  responseSerializer?: (value: any) => any;\n  localStorageKey?: string;\n}\n\nexport const defaultConfig: HttpCacheConfig = {\n  strategy: 'explicit',\n  ttl: 3600000, // One hour\n  localStorageKey: 'httpCache'\n};\n\nexport function cashewConfig(config: Partial<HttpCacheConfig> = defaultConfig): HttpCacheConfig {\n  return {\n    strategy: config.strategy ?? defaultConfig.strategy,\n    ttl: config.ttl ?? defaultConfig.ttl,\n    localStorageKey: config.localStorageKey ?? defaultConfig.localStorageKey,\n    responseSerializer: config.responseSerializer\n  };\n}\n\nexport const HTTP_CACHE_CONFIG = new InjectionToken<HttpCacheConfig>('HTTP_CACHE_CONFIG');\n","export function deleteByRegex(pattern: RegExp, cache: Map<any, any>) {\n  for (const [key] of Array.from(cache)) {\n    if ((pattern as RegExp).test(key)) {\n      cache.delete(key);\n      break;\n    }\n  }\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { deleteByRegex } from './deleteByRegex';\n\nexport abstract class HttpCacheStorage {\n  abstract has(key: string): boolean;\n  abstract get(key: string): HttpResponse<any>;\n  abstract set(key: string, response: HttpResponse<any>): void;\n  abstract delete(key?: string | RegExp): void;\n}\n\n@Injectable()\nexport class DefaultHttpCacheStorage implements HttpCacheStorage {\n  private cache = new Map<string, HttpResponse<any>>();\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  get(key: string) {\n    return this.cache.get(key);\n  }\n\n  set(key: string, response: HttpResponse<any>): void {\n    this.cache.set(key, response);\n  }\n\n  delete(key?: string | RegExp): void {\n    if (!key) {\n      this.cache.clear();\n      return;\n    }\n\n    if (typeof key === 'string') {\n      this.cache.delete(key as string);\n      return;\n    }\n\n    deleteByRegex(key as RegExp, this.cache);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { deleteByRegex } from './deleteByRegex';\n\nexport abstract class TTLManager {\n  abstract isValid(key: string): boolean;\n  abstract set(key: string, ttl?: number): void;\n  abstract delete(key?: string | RegExp): void;\n}\n\n@Injectable()\nexport class DefaultTTLManager {\n  private cache = new Map<string, number>();\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {}\n\n  isValid(key: string): boolean {\n    return this.cache.get(key) > new Date().getTime();\n  }\n\n  set(key: string, ttl?: number): void {\n    let resolveTTL = ttl || this.config.ttl;\n\n    this.cache.set(key, new Date().setMilliseconds(resolveTTL));\n  }\n\n  delete(key?: string | RegExp): void {\n    if (!key) {\n      this.cache.clear();\n      return;\n    }\n\n    if (typeof key === 'string') {\n      this.cache.delete(key as string);\n      return;\n    }\n\n    deleteByRegex(key as RegExp, this.cache);\n  }\n}\n","import { HttpRequest } from '@angular/common/http';\n\nexport abstract class HttpCacheGuard {\n  abstract canActivate(request: HttpRequest<any>): boolean;\n}\n\nexport class DefaultHttpCacheGuard implements HttpCacheGuard {\n  canActivate(request: HttpRequest<any>): boolean {\n    return request.method === 'GET' && request.responseType === 'json';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RequestsQueue {\n  private queue = new Map();\n\n  get(key: string) {\n    return this.queue.get(key);\n  }\n\n  has(key: string) {\n    return this.queue.has(key);\n  }\n\n  set(key: string, shared: Observable<HttpEvent<any>>) {\n    this.queue.set(key, shared);\n  }\n\n  delete(key: string) {\n    this.queue.delete(key);\n  }\n}\n","export class CacheBucket {\n  private keys = new Set();\n\n  add(key: string) {\n    this.keys.add(key);\n  }\n\n  has(key: string) {\n    return this.keys.has(key);\n  }\n\n  forEach(cb) {\n    this.keys.forEach(cb);\n  }\n\n  delete(key: string) {\n    this.keys.delete(key);\n  }\n\n  clear() {\n    this.keys.clear();\n  }\n}\n","import { HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { HttpCacheStorage } from './httpCacheStorage';\nimport { TTLManager } from './ttlManager';\nimport { HttpCacheGuard } from './httpCacheGuard';\nimport { RequestsQueue } from './requestsQueue';\nimport { CacheBucket } from './cacheBucket';\n\n@Injectable()\nexport class HttpCacheManager {\n  constructor(\n    private queue: RequestsQueue,\n    private storage: HttpCacheStorage,\n    private guard: HttpCacheGuard,\n    private ttlManager: TTLManager,\n    @Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig\n  ) {}\n\n  validate(key: string) {\n    const has = this.storage.has(key);\n    const isValid = this.ttlManager.isValid(key);\n\n    if (has && isValid) return true;\n\n    this.storage.delete(key);\n\n    return false;\n  }\n\n  get<T = any>(key: string): HttpResponse<T> {\n    return this._resolveResponse<T>(this.storage.get(key));\n  }\n\n  has(key: string) {\n    return this.storage.has(key);\n  }\n\n  set(key: string, body: HttpResponse<any> | any, { ttl, bucket }: { ttl?: number; bucket?: CacheBucket } = {}) {\n    let response = body;\n\n    if (!(body instanceof HttpResponse)) {\n      response = new HttpResponse({\n        body,\n        status: 200,\n        url: key\n      });\n    }\n\n    this._set(key, response, ttl);\n    bucket && bucket.add(key);\n  }\n\n  delete(key?: string | RegExp | CacheBucket): void {\n    if (key instanceof CacheBucket) {\n      key.forEach(value => this.delete(value));\n      key.clear();\n      return;\n    }\n\n    this.storage.delete(key);\n    this.ttlManager.delete(key);\n  }\n\n  _getQueue(): RequestsQueue {\n    return this.queue;\n  }\n\n  _isCacheable(canActivate: boolean, cache: boolean) {\n    const strategy = this.config.strategy;\n\n    if (strategy === 'explicit') {\n      return cache;\n    }\n\n    if (canActivate && strategy === 'implicit') {\n      return cache !== false;\n    }\n\n    return false;\n  }\n\n  _set(key: string, response: HttpResponse<any>, ttl: number) {\n    this.storage.set(key, response);\n    this.ttlManager.set(key, ttl);\n  }\n\n  _canActivate(request: HttpRequest<any>) {\n    return this.guard.canActivate(request);\n  }\n\n  _resolveResponse<T = any>(event: HttpResponse<T>): HttpResponse<T> {\n    return this.config.responseSerializer ? event.clone({ body: this.config.responseSerializer(event.body) }) : event;\n  }\n}\n","import { HttpContext, HttpContextToken } from '@angular/common/http';\nimport { CacheBucket } from './cacheBucket';\n\nexport interface ContextOptions {\n  cache?: boolean;\n  ttl?: number;\n  key?: string;\n  bucket?: CacheBucket;\n}\n\nexport const CACHE_CONTEXT = new HttpContextToken<ContextOptions | undefined>(() => undefined);\n\nexport function withCache(options: ContextOptions = {}) {\n  return new HttpContext().set(CACHE_CONTEXT, {\n    cache: true,\n    ...options\n  });\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { finalize, share, tap } from 'rxjs/operators';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\n\nimport { HttpCacheManager } from './httpCacheManager.service';\nimport { KeySerializer } from './keySerializer';\nimport { CACHE_CONTEXT } from './cacheContext';\n\n@Injectable()\nexport class HttpCacheInterceptor implements HttpInterceptor {\n  constructor(\n    private httpCacheManager: HttpCacheManager,\n    private keySerializer: KeySerializer,\n    @Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const context = request.context.get(CACHE_CONTEXT);\n\n    if (context === undefined) {\n      return next.handle(request);\n    }\n\n    const { cache, ttl, bucket } = context;\n\n    const canActivate = this.httpCacheManager._canActivate(request);\n\n    if (this.httpCacheManager._isCacheable(canActivate, cache)) {\n      const queue = this.httpCacheManager._getQueue();\n      const key = this.keySerializer.serialize(request, context);\n\n      bucket && bucket.add(key);\n\n      if (queue.has(key)) {\n        return queue.get(key);\n      }\n\n      if (this.httpCacheManager.validate(key)) {\n        return of(this.httpCacheManager.get(key));\n      }\n\n      const shared = next.handle(request).pipe(\n        tap(event => {\n          if (event instanceof HttpResponse) {\n            const cache = this.httpCacheManager._resolveResponse(event);\n            this.httpCacheManager._set(key, cache, +ttl);\n          }\n        }),\n        finalize(() => queue.delete(key)),\n        share()\n      );\n\n      queue.set(key, shared);\n\n      return shared;\n    }\n\n    return next.handle(request);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { HttpCacheInterceptor } from './httpCacheInterceptor';\nimport { DefaultKeySerializer, KeySerializer } from './keySerializer';\nimport { DefaultHttpCacheStorage, HttpCacheStorage } from './httpCacheStorage';\nimport { defaultConfig, HTTP_CACHE_CONFIG, HttpCacheConfig } from './httpCacheConfig';\nimport { HttpCacheManager } from './httpCacheManager.service';\nimport { DefaultTTLManager, TTLManager } from './ttlManager';\nimport { DefaultHttpCacheGuard, HttpCacheGuard } from './httpCacheGuard';\nimport { RequestsQueue } from './requestsQueue';\n\n@NgModule({})\nexport class HttpCacheInterceptorModule {\n  static forRoot(config: Partial<HttpCacheConfig> = {}): ModuleWithProviders<HttpCacheInterceptorModule> {\n    return {\n      providers: [\n        { provide: HTTP_CACHE_CONFIG, useValue: { ...defaultConfig, ...config } },\n        { provide: KeySerializer, useClass: DefaultKeySerializer },\n        { provide: HttpCacheStorage, useClass: DefaultHttpCacheStorage },\n        { provide: TTLManager, useClass: DefaultTTLManager },\n        { provide: HttpCacheGuard, useClass: DefaultHttpCacheGuard },\n        { provide: HTTP_INTERCEPTORS, useClass: HttpCacheInterceptor, multi: true },\n        HttpCacheManager,\n        RequestsQueue\n      ],\n      ngModule: HttpCacheInterceptorModule\n    };\n  }\n}\n","export function setCacheInStorage(key: string, storage: Map<string, any>) {\n  localStorage.setItem(key, JSON.stringify(mapToObj(storage)));\n}\n\nexport function getStorageCache(key: string): Map<string, any> {\n  const storage = JSON.parse(localStorage.getItem(key) || '{}');\n  const map = new Map();\n  Object.keys(storage).forEach(key => map.set(key, storage[key]));\n\n  return map;\n}\n\nexport function clearStorageCache(key: string) {\n  localStorage.removeItem(key);\n}\n\nfunction mapToObj(map: Map<any, any>) {\n  return Array.from(map).reduce((obj, [key, value]) => {\n    obj[key] = value;\n    return obj;\n  }, {});\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { deleteByRegex } from '../deleteByRegex';\nimport { DefaultHttpCacheStorage, HttpCacheStorage } from '../httpCacheStorage';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from '../httpCacheConfig';\nimport { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';\n\n@Injectable()\nexport class HttpCacheLocalStorage implements HttpCacheStorage {\n  private readonly cache = new DefaultHttpCacheStorage();\n  private readonly storageKey: string;\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {\n    this.storageKey = config.localStorageKey;\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key) || getStorageCache(this.storageKey).has(key);\n  }\n\n  get(key: string): HttpResponse<any> {\n    const cacheValue = this.cache.get(key);\n\n    if (cacheValue) {\n      return cacheValue;\n    }\n\n    const value = getStorageCache(this.storageKey).get(key);\n\n    if (value) {\n      const response = new HttpResponse(value);\n      this.cache.set(key, response);\n    }\n\n    return this.cache.get(key);\n  }\n\n  set(key: string, response: HttpResponse<any>): void {\n    const storage = getStorageCache(this.storageKey);\n    storage.set(key, response);\n    setCacheInStorage(this.storageKey, storage);\n    this.cache.set(key, response);\n  }\n\n  delete(key?: string | RegExp): void {\n    this.cache.delete(key);\n\n    if (!key) {\n      clearStorageCache(this.storageKey);\n      return;\n    }\n\n    const storage = getStorageCache(this.storageKey);\n\n    if (typeof key === 'string') {\n      storage.delete(key);\n      setCacheInStorage(this.storageKey, storage);\n\n      return;\n    }\n\n    deleteByRegex(key as RegExp, storage);\n    setCacheInStorage(this.storageKey, storage);\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from '../httpCacheConfig';\nimport { DefaultTTLManager } from '../ttlManager';\nimport { deleteByRegex } from '../deleteByRegex';\nimport { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';\n\n@Injectable()\nexport class LocalStorageTTLManager {\n  private readonly ttl: DefaultTTLManager;\n  private readonly ttlStorageKey: string;\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {\n    this.ttlStorageKey = `${config.localStorageKey}TTL`;\n    this.ttl = new DefaultTTLManager(config);\n  }\n\n  isValid(key: string): boolean {\n    const valid = this.ttl.isValid(key);\n\n    if (valid) {\n      return true;\n    }\n\n    const localStorageTimeStamp = getStorageCache(this.ttlStorageKey).get(key);\n    const validInStorage = localStorageTimeStamp > new Date().getTime();\n\n    if (validInStorage) {\n      this.ttl.set(key, localStorageTimeStamp - new Date().getTime());\n    }\n\n    return validInStorage;\n  }\n\n  set(key: string, ttl?: number) {\n    const resolveTTL = ttl || this.config.ttl;\n    const storage = getStorageCache(this.ttlStorageKey);\n    storage.set(key, new Date().setMilliseconds(resolveTTL));\n    setCacheInStorage(this.ttlStorageKey, storage);\n    this.ttl.set(key, resolveTTL);\n  }\n\n  delete(key?: string | RegExp) {\n    this.ttl.delete(key);\n\n    if (!key) {\n      clearStorageCache(this.ttlStorageKey);\n\n      return;\n    }\n\n    if (typeof key === 'string') {\n      const storage = getStorageCache(this.ttlStorageKey);\n      storage.delete(key);\n      setCacheInStorage(this.ttlStorageKey, storage);\n\n      return;\n    }\n\n    const storage = getStorageCache(this.ttlStorageKey);\n    deleteByRegex(key as RegExp, storage);\n    setCacheInStorage(this.ttlStorageKey, storage);\n  }\n}\n","import { TTLManager } from '../ttlManager';\nimport { HttpCacheStorage } from '../httpCacheStorage';\nimport { HttpCacheLocalStorage } from './httpCacheLocalStorage';\nimport { LocalStorageTTLManager } from './localStorageTtlManager';\n\nexport const useHttpCacheLocalStorage = [\n  { provide: HttpCacheStorage, useClass: HttpCacheLocalStorage },\n  { provide: TTLManager, useClass: LocalStorageTTLManager }\n];\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {HttpCacheLocalStorage as ɵb} from './lib/localstorage/httpCacheLocalStorage';\nexport {LocalStorageTTLManager as ɵc} from './lib/localstorage/localStorageTtlManager';\nexport {RequestsQueue as ɵa} from './lib/requestsQueue';"],"names":[],"mappings":"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"}