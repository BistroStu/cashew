import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from '../httpCacheConfig';
import { DefaultTTLManager } from '../ttlManager';
import { deleteByRegex } from '../deleteByRegex';
import { setCacheInStorage, getStorageCache, clearStorageCache } from './localstorage';
export class LocalStorageTTLManager {
    constructor(config) {
        this.config = config;
        this.ttlStorageKey = `${config.localStorageKey}TTL`;
        this.ttl = new DefaultTTLManager(config);
    }
    isValid(key) {
        const valid = this.ttl.isValid(key);
        if (valid) {
            return true;
        }
        const localStorageTimeStamp = getStorageCache(this.ttlStorageKey).get(key);
        const validInStorage = localStorageTimeStamp > new Date().getTime();
        if (validInStorage) {
            this.ttl.set(key, localStorageTimeStamp - new Date().getTime());
        }
        return validInStorage;
    }
    set(key, ttl) {
        const resolveTTL = ttl || this.config.ttl;
        const storage = getStorageCache(this.ttlStorageKey);
        storage.set(key, new Date().setMilliseconds(resolveTTL));
        setCacheInStorage(this.ttlStorageKey, storage);
        this.ttl.set(key, resolveTTL);
    }
    delete(key) {
        this.ttl.delete(key);
        if (!key) {
            clearStorageCache(this.ttlStorageKey);
            return;
        }
        if (typeof key === 'string') {
            const storage = getStorageCache(this.ttlStorageKey);
            storage.delete(key);
            setCacheInStorage(this.ttlStorageKey, storage);
            return;
        }
        const storage = getStorageCache(this.ttlStorageKey);
        deleteByRegex(key, storage);
        setCacheInStorage(this.ttlStorageKey, storage);
    }
}
LocalStorageTTLManager.decorators = [
    { type: Injectable }
];
LocalStorageTTLManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlVHRsTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25nbmVhdC9jYXNoZXcvc3JjL2xpYi9sb2NhbHN0b3JhZ2UvbG9jYWxTdG9yYWdlVHRsTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdkYsTUFBTSxPQUFPLHNCQUFzQjtJQUlqQyxZQUErQyxNQUF1QjtRQUF2QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUNwRSxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsTUFBTSxDQUFDLGVBQWUsS0FBSyxDQUFDO1FBQ3BELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQVc7UUFDakIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFcEMsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxxQkFBcUIsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzRSxNQUFNLGNBQWMsR0FBRyxxQkFBcUIsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXBFLElBQUksY0FBYyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDakU7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxHQUFZO1FBQzNCLE1BQU0sVUFBVSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUMxQyxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDekQsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFxQjtRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXRDLE9BQU87U0FDUjtRQUVELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDcEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRS9DLE9BQU87U0FDUjtRQUVELE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDcEQsYUFBYSxDQUFDLEdBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0QyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7OztZQXZERixVQUFVOzs7NENBS0ksTUFBTSxTQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4uL2h0dHBDYWNoZUNvbmZpZyc7XG5pbXBvcnQgeyBEZWZhdWx0VFRMTWFuYWdlciB9IGZyb20gJy4uL3R0bE1hbmFnZXInO1xuaW1wb3J0IHsgZGVsZXRlQnlSZWdleCB9IGZyb20gJy4uL2RlbGV0ZUJ5UmVnZXgnO1xuaW1wb3J0IHsgc2V0Q2FjaGVJblN0b3JhZ2UsIGdldFN0b3JhZ2VDYWNoZSwgY2xlYXJTdG9yYWdlQ2FjaGUgfSBmcm9tICcuL2xvY2Fsc3RvcmFnZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VUVExNYW5hZ2VyIHtcbiAgcHJpdmF0ZSByZWFkb25seSB0dGw6IERlZmF1bHRUVExNYW5hZ2VyO1xuICBwcml2YXRlIHJlYWRvbmx5IHR0bFN0b3JhZ2VLZXk6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEhUVFBfQ0FDSEVfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogSHR0cENhY2hlQ29uZmlnKSB7XG4gICAgdGhpcy50dGxTdG9yYWdlS2V5ID0gYCR7Y29uZmlnLmxvY2FsU3RvcmFnZUtleX1UVExgO1xuICAgIHRoaXMudHRsID0gbmV3IERlZmF1bHRUVExNYW5hZ2VyKGNvbmZpZyk7XG4gIH1cblxuICBpc1ZhbGlkKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdmFsaWQgPSB0aGlzLnR0bC5pc1ZhbGlkKGtleSk7XG5cbiAgICBpZiAodmFsaWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGxvY2FsU3RvcmFnZVRpbWVTdGFtcCA9IGdldFN0b3JhZ2VDYWNoZSh0aGlzLnR0bFN0b3JhZ2VLZXkpLmdldChrZXkpO1xuICAgIGNvbnN0IHZhbGlkSW5TdG9yYWdlID0gbG9jYWxTdG9yYWdlVGltZVN0YW1wID4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAodmFsaWRJblN0b3JhZ2UpIHtcbiAgICAgIHRoaXMudHRsLnNldChrZXksIGxvY2FsU3RvcmFnZVRpbWVTdGFtcCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRJblN0b3JhZ2U7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHR0bD86IG51bWJlcikge1xuICAgIGNvbnN0IHJlc29sdmVUVEwgPSB0dGwgfHwgdGhpcy5jb25maWcudHRsO1xuICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlQ2FjaGUodGhpcy50dGxTdG9yYWdlS2V5KTtcbiAgICBzdG9yYWdlLnNldChrZXksIG5ldyBEYXRlKCkuc2V0TWlsbGlzZWNvbmRzKHJlc29sdmVUVEwpKTtcbiAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnR0bFN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuICAgIHRoaXMudHRsLnNldChrZXksIHJlc29sdmVUVEwpO1xuICB9XG5cbiAgZGVsZXRlKGtleT86IHN0cmluZyB8IFJlZ0V4cCkge1xuICAgIHRoaXMudHRsLmRlbGV0ZShrZXkpO1xuXG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIGNsZWFyU3RvcmFnZUNhY2hlKHRoaXMudHRsU3RvcmFnZUtleSk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlQ2FjaGUodGhpcy50dGxTdG9yYWdlS2V5KTtcbiAgICAgIHN0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgICBzZXRDYWNoZUluU3RvcmFnZSh0aGlzLnR0bFN0b3JhZ2VLZXksIHN0b3JhZ2UpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmFnZSA9IGdldFN0b3JhZ2VDYWNoZSh0aGlzLnR0bFN0b3JhZ2VLZXkpO1xuICAgIGRlbGV0ZUJ5UmVnZXgoa2V5IGFzIFJlZ0V4cCwgc3RvcmFnZSk7XG4gICAgc2V0Q2FjaGVJblN0b3JhZ2UodGhpcy50dGxTdG9yYWdlS2V5LCBzdG9yYWdlKTtcbiAgfVxufVxuIl19