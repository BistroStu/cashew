import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { deleteByRegex } from './deleteByRegex';
export class TTLManager {
}
export class DefaultTTLManager {
    constructor(config) {
        this.config = config;
        this.cache = new Map();
    }
    isValid(key) {
        return this.cache.get(key) > new Date().getTime();
    }
    set(key, ttl) {
        let resolveTTL = ttl || this.config.ttl;
        this.cache.set(key, new Date().setMilliseconds(resolveTTL));
    }
    delete(key) {
        if (!key) {
            this.cache.clear();
            return;
        }
        if (typeof key === 'string') {
            this.cache.delete(key);
            return;
        }
        deleteByRegex(key, this.cache);
    }
}
DefaultTTLManager.decorators = [
    { type: Injectable }
];
DefaultTTLManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHRsTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25nbmVhdC9jYXNoZXcvc3JjL2xpYi90dGxNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEQsTUFBTSxPQUFnQixVQUFVO0NBSS9CO0FBR0QsTUFBTSxPQUFPLGlCQUFpQjtJQUc1QixZQUErQyxNQUF1QjtRQUF2QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUY5RCxVQUFLLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7SUFFK0IsQ0FBQztJQUUxRSxPQUFPLENBQUMsR0FBVztRQUNqQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBWTtRQUMzQixJQUFJLFVBQVUsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFFeEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFxQjtRQUMxQixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNuQixPQUFPO1NBQ1I7UUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFhLENBQUMsQ0FBQztZQUNqQyxPQUFPO1NBQ1I7UUFFRCxhQUFhLENBQUMsR0FBYSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7WUE1QkYsVUFBVTs7OzRDQUlJLE1BQU0sU0FBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhUVFBfQ0FDSEVfQ09ORklHLCBIdHRwQ2FjaGVDb25maWcgfSBmcm9tICcuL2h0dHBDYWNoZUNvbmZpZyc7XG5pbXBvcnQgeyBkZWxldGVCeVJlZ2V4IH0gZnJvbSAnLi9kZWxldGVCeVJlZ2V4JztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFRUTE1hbmFnZXIge1xuICBhYnN0cmFjdCBpc1ZhbGlkKGtleTogc3RyaW5nKTogYm9vbGVhbjtcbiAgYWJzdHJhY3Qgc2V0KGtleTogc3RyaW5nLCB0dGw/OiBudW1iZXIpOiB2b2lkO1xuICBhYnN0cmFjdCBkZWxldGUoa2V5Pzogc3RyaW5nIHwgUmVnRXhwKTogdm9pZDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlZmF1bHRUVExNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChIVFRQX0NBQ0hFX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEh0dHBDYWNoZUNvbmZpZykge31cblxuICBpc1ZhbGlkKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSkgPiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG4gIHNldChrZXk6IHN0cmluZywgdHRsPzogbnVtYmVyKTogdm9pZCB7XG4gICAgbGV0IHJlc29sdmVUVEwgPSB0dGwgfHwgdGhpcy5jb25maWcudHRsO1xuXG4gICAgdGhpcy5jYWNoZS5zZXQoa2V5LCBuZXcgRGF0ZSgpLnNldE1pbGxpc2Vjb25kcyhyZXNvbHZlVFRMKSk7XG4gIH1cblxuICBkZWxldGUoa2V5Pzogc3RyaW5nIHwgUmVnRXhwKTogdm9pZCB7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY2FjaGUuZGVsZXRlKGtleSBhcyBzdHJpbmcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlbGV0ZUJ5UmVnZXgoa2V5IGFzIFJlZ0V4cCwgdGhpcy5jYWNoZSk7XG4gIH1cbn1cbiJdfQ==