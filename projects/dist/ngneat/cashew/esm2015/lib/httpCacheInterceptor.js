import { Inject, Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { finalize, share, tap } from 'rxjs/operators';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheManager } from './httpCacheManager.service';
import { KeySerializer } from './keySerializer';
import { CACHE_CONTEXT } from './cacheContext';
export class HttpCacheInterceptor {
    constructor(httpCacheManager, keySerializer, config) {
        this.httpCacheManager = httpCacheManager;
        this.keySerializer = keySerializer;
        this.config = config;
    }
    intercept(request, next) {
        const context = request.context.get(CACHE_CONTEXT);
        if (context === undefined) {
            return next.handle(request);
        }
        const { cache, ttl, bucket } = context;
        const canActivate = this.httpCacheManager._canActivate(request);
        if (this.httpCacheManager._isCacheable(canActivate, cache)) {
            const queue = this.httpCacheManager._getQueue();
            const key = this.keySerializer.serialize(request, context);
            bucket && bucket.add(key);
            if (queue.has(key)) {
                return queue.get(key);
            }
            if (this.httpCacheManager.validate(key)) {
                return of(this.httpCacheManager.get(key));
            }
            const shared = next.handle(request).pipe(tap(event => {
                if (event instanceof HttpResponse) {
                    const cache = this.httpCacheManager._resolveResponse(event);
                    this.httpCacheManager._set(key, cache, +ttl);
                }
            }), finalize(() => queue.delete(key)), share());
            queue.set(key, shared);
            return shared;
        }
        return next.handle(request);
    }
}
HttpCacheInterceptor.decorators = [
    { type: Injectable }
];
HttpCacheInterceptor.ctorParameters = () => [
    { type: HttpCacheManager },
    { type: KeySerializer },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlSW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9uZ25lYXQvY2FzaGV3L3NyYy9saWIvaHR0cENhY2hlSW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUF3RCxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxtQkFBbUIsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRy9DLE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFDVSxnQkFBa0MsRUFDbEMsYUFBNEIsRUFDRCxNQUF1QjtRQUZsRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQ0QsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7SUFDekQsQ0FBQztJQUVKLFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCO1FBQ3BELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRW5ELElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0I7UUFFRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFFdkMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQzFELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFM0QsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFMUIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNsQixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkI7WUFFRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMzQztZQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN0QyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxLQUFLLFlBQVksWUFBWSxFQUFFO29CQUNqQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzVELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUM5QztZQUNILENBQUMsQ0FBQyxFQUNGLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ2pDLEtBQUssRUFBRSxDQUNSLENBQUM7WUFFRixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUV2QixPQUFPLE1BQU0sQ0FBQztTQUNmO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQWxERixVQUFVOzs7WUFKRixnQkFBZ0I7WUFDaEIsYUFBYTs0Q0FRakIsTUFBTSxTQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplLCBzaGFyZSwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4vaHR0cENhY2hlQ29uZmlnJztcblxuaW1wb3J0IHsgSHR0cENhY2hlTWFuYWdlciB9IGZyb20gJy4vaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlJztcbmltcG9ydCB7IEtleVNlcmlhbGl6ZXIgfSBmcm9tICcuL2tleVNlcmlhbGl6ZXInO1xuaW1wb3J0IHsgQ0FDSEVfQ09OVEVYVCB9IGZyb20gJy4vY2FjaGVDb250ZXh0JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBDYWNoZUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwQ2FjaGVNYW5hZ2VyOiBIdHRwQ2FjaGVNYW5hZ2VyLFxuICAgIHByaXZhdGUga2V5U2VyaWFsaXplcjogS2V5U2VyaWFsaXplcixcbiAgICBASW5qZWN0KEhUVFBfQ0FDSEVfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogSHR0cENhY2hlQ29uZmlnXG4gICkge31cblxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgY29uc3QgY29udGV4dCA9IHJlcXVlc3QuY29udGV4dC5nZXQoQ0FDSEVfQ09OVEVYVCk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjYWNoZSwgdHRsLCBidWNrZXQgfSA9IGNvbnRleHQ7XG5cbiAgICBjb25zdCBjYW5BY3RpdmF0ZSA9IHRoaXMuaHR0cENhY2hlTWFuYWdlci5fY2FuQWN0aXZhdGUocmVxdWVzdCk7XG5cbiAgICBpZiAodGhpcy5odHRwQ2FjaGVNYW5hZ2VyLl9pc0NhY2hlYWJsZShjYW5BY3RpdmF0ZSwgY2FjaGUpKSB7XG4gICAgICBjb25zdCBxdWV1ZSA9IHRoaXMuaHR0cENhY2hlTWFuYWdlci5fZ2V0UXVldWUoKTtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5U2VyaWFsaXplci5zZXJpYWxpemUocmVxdWVzdCwgY29udGV4dCk7XG5cbiAgICAgIGJ1Y2tldCAmJiBidWNrZXQuYWRkKGtleSk7XG5cbiAgICAgIGlmIChxdWV1ZS5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gcXVldWUuZ2V0KGtleSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmh0dHBDYWNoZU1hbmFnZXIudmFsaWRhdGUoa2V5KSkge1xuICAgICAgICByZXR1cm4gb2YodGhpcy5odHRwQ2FjaGVNYW5hZ2VyLmdldChrZXkpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2hhcmVkID0gbmV4dC5oYW5kbGUocmVxdWVzdCkucGlwZShcbiAgICAgICAgdGFwKGV2ZW50ID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5odHRwQ2FjaGVNYW5hZ2VyLl9yZXNvbHZlUmVzcG9uc2UoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5odHRwQ2FjaGVNYW5hZ2VyLl9zZXQoa2V5LCBjYWNoZSwgK3R0bCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZmluYWxpemUoKCkgPT4gcXVldWUuZGVsZXRlKGtleSkpLFxuICAgICAgICBzaGFyZSgpXG4gICAgICApO1xuXG4gICAgICBxdWV1ZS5zZXQoa2V5LCBzaGFyZWQpO1xuXG4gICAgICByZXR1cm4gc2hhcmVkO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KTtcbiAgfVxufVxuIl19