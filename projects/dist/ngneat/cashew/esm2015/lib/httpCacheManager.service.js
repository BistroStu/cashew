import { HttpResponse } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheStorage } from './httpCacheStorage';
import { TTLManager } from './ttlManager';
import { HttpCacheGuard } from './httpCacheGuard';
import { RequestsQueue } from './requestsQueue';
import { CacheBucket } from './cacheBucket';
export class HttpCacheManager {
    constructor(queue, storage, guard, ttlManager, config) {
        this.queue = queue;
        this.storage = storage;
        this.guard = guard;
        this.ttlManager = ttlManager;
        this.config = config;
    }
    validate(key) {
        const has = this.storage.has(key);
        const isValid = this.ttlManager.isValid(key);
        if (has && isValid)
            return true;
        this.storage.delete(key);
        return false;
    }
    get(key) {
        return this._resolveResponse(this.storage.get(key));
    }
    has(key) {
        return this.storage.has(key);
    }
    set(key, body, { ttl, bucket } = {}) {
        let response = body;
        if (!(body instanceof HttpResponse)) {
            response = new HttpResponse({
                body,
                status: 200,
                url: key
            });
        }
        this._set(key, response, ttl);
        bucket && bucket.add(key);
    }
    delete(key) {
        if (key instanceof CacheBucket) {
            key.forEach(value => this.delete(value));
            key.clear();
            return;
        }
        this.storage.delete(key);
        this.ttlManager.delete(key);
    }
    _getQueue() {
        return this.queue;
    }
    _isCacheable(canActivate, cache) {
        const strategy = this.config.strategy;
        if (strategy === 'explicit') {
            return cache;
        }
        if (canActivate && strategy === 'implicit') {
            return cache !== false;
        }
        return false;
    }
    _set(key, response, ttl) {
        this.storage.set(key, response);
        this.ttlManager.set(key, ttl);
    }
    _canActivate(request) {
        return this.guard.canActivate(request);
    }
    _resolveResponse(event) {
        return this.config.responseSerializer ? event.clone({ body: this.config.responseSerializer(event.body) }) : event;
    }
}
HttpCacheManager.decorators = [
    { type: Injectable }
];
HttpCacheManager.ctorParameters = () => [
    { type: RequestsQueue },
    { type: HttpCacheStorage },
    { type: HttpCacheGuard },
    { type: TTLManager },
    { type: undefined, decorators: [{ type: Inject, args: [HTTP_CACHE_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlTWFuYWdlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmduZWF0L2Nhc2hldy9zcmMvbGliL2h0dHBDYWNoZU1hbmFnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGlCQUFpQixFQUFtQixNQUFNLG1CQUFtQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsWUFDVSxLQUFvQixFQUNwQixPQUF5QixFQUN6QixLQUFxQixFQUNyQixVQUFzQixFQUNLLE1BQXVCO1FBSmxELFVBQUssR0FBTCxLQUFLLENBQWU7UUFDcEIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNLLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQ3pELENBQUM7SUFFSixRQUFRLENBQUMsR0FBVztRQUNsQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FB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QjtZQUVoQixjQUFjO1lBRGQsVUFBVTs0Q0FZZCxNQUFNLFNBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4vaHR0cENhY2hlQ29uZmlnJztcbmltcG9ydCB7IEh0dHBDYWNoZVN0b3JhZ2UgfSBmcm9tICcuL2h0dHBDYWNoZVN0b3JhZ2UnO1xuaW1wb3J0IHsgVFRMTWFuYWdlciB9IGZyb20gJy4vdHRsTWFuYWdlcic7XG5pbXBvcnQgeyBIdHRwQ2FjaGVHdWFyZCB9IGZyb20gJy4vaHR0cENhY2hlR3VhcmQnO1xuaW1wb3J0IHsgUmVxdWVzdHNRdWV1ZSB9IGZyb20gJy4vcmVxdWVzdHNRdWV1ZSc7XG5pbXBvcnQgeyBDYWNoZUJ1Y2tldCB9IGZyb20gJy4vY2FjaGVCdWNrZXQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSHR0cENhY2hlTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcXVldWU6IFJlcXVlc3RzUXVldWUsXG4gICAgcHJpdmF0ZSBzdG9yYWdlOiBIdHRwQ2FjaGVTdG9yYWdlLFxuICAgIHByaXZhdGUgZ3VhcmQ6IEh0dHBDYWNoZUd1YXJkLFxuICAgIHByaXZhdGUgdHRsTWFuYWdlcjogVFRMTWFuYWdlcixcbiAgICBASW5qZWN0KEhUVFBfQ0FDSEVfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogSHR0cENhY2hlQ29uZmlnXG4gICkge31cblxuICB2YWxpZGF0ZShrZXk6IHN0cmluZykge1xuICAgIGNvbnN0IGhhcyA9IHRoaXMuc3RvcmFnZS5oYXMoa2V5KTtcbiAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy50dGxNYW5hZ2VyLmlzVmFsaWQoa2V5KTtcblxuICAgIGlmIChoYXMgJiYgaXNWYWxpZCkgcmV0dXJuIHRydWU7XG5cbiAgICB0aGlzLnN0b3JhZ2UuZGVsZXRlKGtleSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXQ8VCA9IGFueT4oa2V5OiBzdHJpbmcpOiBIdHRwUmVzcG9uc2U8VD4ge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlUmVzcG9uc2U8VD4odGhpcy5zdG9yYWdlLmdldChrZXkpKTtcbiAgfVxuXG4gIGhhcyhrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuaGFzKGtleSk7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIGJvZHk6IEh0dHBSZXNwb25zZTxhbnk+IHwgYW55LCB7IHR0bCwgYnVja2V0IH06IHsgdHRsPzogbnVtYmVyOyBidWNrZXQ/OiBDYWNoZUJ1Y2tldCB9ID0ge30pIHtcbiAgICBsZXQgcmVzcG9uc2UgPSBib2R5O1xuXG4gICAgaWYgKCEoYm9keSBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkpIHtcbiAgICAgIHJlc3BvbnNlID0gbmV3IEh0dHBSZXNwb25zZSh7XG4gICAgICAgIGJvZHksXG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICB1cmw6IGtleVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0KGtleSwgcmVzcG9uc2UsIHR0bCk7XG4gICAgYnVja2V0ICYmIGJ1Y2tldC5hZGQoa2V5KTtcbiAgfVxuXG4gIGRlbGV0ZShrZXk/OiBzdHJpbmcgfCBSZWdFeHAgfCBDYWNoZUJ1Y2tldCk6IHZvaWQge1xuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBDYWNoZUJ1Y2tldCkge1xuICAgICAga2V5LmZvckVhY2godmFsdWUgPT4gdGhpcy5kZWxldGUodmFsdWUpKTtcbiAgICAgIGtleS5jbGVhcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RvcmFnZS5kZWxldGUoa2V5KTtcbiAgICB0aGlzLnR0bE1hbmFnZXIuZGVsZXRlKGtleSk7XG4gIH1cblxuICBfZ2V0UXVldWUoKTogUmVxdWVzdHNRdWV1ZSB7XG4gICAgcmV0dXJuIHRoaXMucXVldWU7XG4gIH1cblxuICBfaXNDYWNoZWFibGUoY2FuQWN0aXZhdGU6IGJvb2xlYW4sIGNhY2hlOiBib29sZWFuKSB7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSB0aGlzLmNvbmZpZy5zdHJhdGVneTtcblxuICAgIGlmIChzdHJhdGVneSA9PT0gJ2V4cGxpY2l0Jykge1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cblxuICAgIGlmIChjYW5BY3RpdmF0ZSAmJiBzdHJhdGVneSA9PT0gJ2ltcGxpY2l0Jykge1xuICAgICAgcmV0dXJuIGNhY2hlICE9PSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBfc2V0KGtleTogc3RyaW5nLCByZXNwb25zZTogSHR0cFJlc3BvbnNlPGFueT4sIHR0bDogbnVtYmVyKSB7XG4gICAgdGhpcy5zdG9yYWdlLnNldChrZXksIHJlc3BvbnNlKTtcbiAgICB0aGlzLnR0bE1hbmFnZXIuc2V0KGtleSwgdHRsKTtcbiAgfVxuXG4gIF9jYW5BY3RpdmF0ZShyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KSB7XG4gICAgcmV0dXJuIHRoaXMuZ3VhcmQuY2FuQWN0aXZhdGUocmVxdWVzdCk7XG4gIH1cblxuICBfcmVzb2x2ZVJlc3BvbnNlPFQgPSBhbnk+KGV2ZW50OiBIdHRwUmVzcG9uc2U8VD4pOiBIdHRwUmVzcG9uc2U8VD4ge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5yZXNwb25zZVNlcmlhbGl6ZXIgPyBldmVudC5jbG9uZSh7IGJvZHk6IHRoaXMuY29uZmlnLnJlc3BvbnNlU2VyaWFsaXplcihldmVudC5ib2R5KSB9KSA6IGV2ZW50O1xuICB9XG59XG4iXX0=