import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { HttpCacheInterceptor } from './httpCacheInterceptor';
import { DefaultKeySerializer, KeySerializer } from './keySerializer';
import { DefaultHttpCacheStorage, HttpCacheStorage } from './httpCacheStorage';
import { defaultConfig, HTTP_CACHE_CONFIG } from './httpCacheConfig';
import { HttpCacheManager } from './httpCacheManager.service';
import { DefaultTTLManager, TTLManager } from './ttlManager';
import { DefaultHttpCacheGuard, HttpCacheGuard } from './httpCacheGuard';
import { RequestsQueue } from './requestsQueue';
export class HttpCacheInterceptorModule {
    static forRoot(config = {}) {
        return {
            providers: [
                { provide: HTTP_CACHE_CONFIG, useValue: Object.assign(Object.assign({}, defaultConfig), config) },
                { provide: KeySerializer, useClass: DefaultKeySerializer },
                { provide: HttpCacheStorage, useClass: DefaultHttpCacheStorage },
                { provide: TTLManager, useClass: DefaultTTLManager },
                { provide: HttpCacheGuard, useClass: DefaultHttpCacheGuard },
                { provide: HTTP_INTERCEPTORS, useClass: HttpCacheInterceptor, multi: true },
                HttpCacheManager,
                RequestsQueue
            ],
            ngModule: HttpCacheInterceptorModule
        };
    }
}
HttpCacheInterceptorModule.decorators = [
    { type: NgModule, args: [{},] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cENhY2hlSW50ZXJjZXB0b3IubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbmduZWF0L2Nhc2hldy9zcmMvbGliL2h0dHBDYWNoZUludGVyY2VwdG9yLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDL0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHaEQsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQW1DLEVBQUU7UUFDbEQsT0FBTztZQUNMLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLGtDQUFPLGFBQWEsR0FBSyxNQUFNLENBQUUsRUFBRTtnQkFDekUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTtnQkFDMUQsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFO2dCQUNoRSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO2dCQUNwRCxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFO2dCQUM1RCxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDM0UsZ0JBQWdCO2dCQUNoQixhQUFhO2FBQ2Q7WUFDRCxRQUFRLEVBQUUsMEJBQTBCO1NBQ3JDLENBQUM7SUFDSixDQUFDOzs7WUFoQkYsUUFBUSxTQUFDLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2FjaGVJbnRlcmNlcHRvciB9IGZyb20gJy4vaHR0cENhY2hlSW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgRGVmYXVsdEtleVNlcmlhbGl6ZXIsIEtleVNlcmlhbGl6ZXIgfSBmcm9tICcuL2tleVNlcmlhbGl6ZXInO1xuaW1wb3J0IHsgRGVmYXVsdEh0dHBDYWNoZVN0b3JhZ2UsIEh0dHBDYWNoZVN0b3JhZ2UgfSBmcm9tICcuL2h0dHBDYWNoZVN0b3JhZ2UnO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZywgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4vaHR0cENhY2hlQ29uZmlnJztcbmltcG9ydCB7IEh0dHBDYWNoZU1hbmFnZXIgfSBmcm9tICcuL2h0dHBDYWNoZU1hbmFnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEZWZhdWx0VFRMTWFuYWdlciwgVFRMTWFuYWdlciB9IGZyb20gJy4vdHRsTWFuYWdlcic7XG5pbXBvcnQgeyBEZWZhdWx0SHR0cENhY2hlR3VhcmQsIEh0dHBDYWNoZUd1YXJkIH0gZnJvbSAnLi9odHRwQ2FjaGVHdWFyZCc7XG5pbXBvcnQgeyBSZXF1ZXN0c1F1ZXVlIH0gZnJvbSAnLi9yZXF1ZXN0c1F1ZXVlJztcblxuQE5nTW9kdWxlKHt9KVxuZXhwb3J0IGNsYXNzIEh0dHBDYWNoZUludGVyY2VwdG9yTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBQYXJ0aWFsPEh0dHBDYWNoZUNvbmZpZz4gPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8SHR0cENhY2hlSW50ZXJjZXB0b3JNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogSFRUUF9DQUNIRV9DT05GSUcsIHVzZVZhbHVlOiB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9IH0sXG4gICAgICAgIHsgcHJvdmlkZTogS2V5U2VyaWFsaXplciwgdXNlQ2xhc3M6IERlZmF1bHRLZXlTZXJpYWxpemVyIH0sXG4gICAgICAgIHsgcHJvdmlkZTogSHR0cENhY2hlU3RvcmFnZSwgdXNlQ2xhc3M6IERlZmF1bHRIdHRwQ2FjaGVTdG9yYWdlIH0sXG4gICAgICAgIHsgcHJvdmlkZTogVFRMTWFuYWdlciwgdXNlQ2xhc3M6IERlZmF1bHRUVExNYW5hZ2VyIH0sXG4gICAgICAgIHsgcHJvdmlkZTogSHR0cENhY2hlR3VhcmQsIHVzZUNsYXNzOiBEZWZhdWx0SHR0cENhY2hlR3VhcmQgfSxcbiAgICAgICAgeyBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUywgdXNlQ2xhc3M6IEh0dHBDYWNoZUludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZSB9LFxuICAgICAgICBIdHRwQ2FjaGVNYW5hZ2VyLFxuICAgICAgICBSZXF1ZXN0c1F1ZXVlXG4gICAgICBdLFxuICAgICAgbmdNb2R1bGU6IEh0dHBDYWNoZUludGVyY2VwdG9yTW9kdWxlXG4gICAgfTtcbiAgfVxufVxuIl19